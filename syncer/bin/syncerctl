#!/usr/bin/env python3

import os
import sys
import argparse
import productstatus.api
import productstatus.exceptions
import configparser
import syncer.config
import syncer.exceptions
import syncer.persistence

def exec_load(args):
    try:
        api = productstatus.api.Api(args.base_url, verify_ssl=args.verify_ssl)
        pi = api.productinstance[args.product_instance_id]
        print('%s = %s' % (args.product_instance_id, pi))
        state_database = syncer.persistence.StateDatabase(args.database, create_if_missing=False)
        state_database.add_productinstance_to_be_processed(pi, args.force)
        print('Queued for processing')
        return syncer.config.EXIT_SUCCESS
    except syncer.exceptions.MissingStateFile:
        print('Unable to find state file')
        return syncer.config.EXIT_CONFIG
    except productstatus.exceptions.ProductstatusException as e:
        print('Error when contacting productstatus service:', str(e))
        return syncer.config.EXIT_CONNECT_PRODUCTSTATUS
    


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    sub = parser.add_subparsers(help='Try `syncerctl <sub-command> --help`')

    # parser for the 'load' command
    load = sub.add_parser('load', help='Ask Syncer to load and activate a specific product instance')
    load.add_argument('product_instance_id', type=str, help='Product instance id from Productstatus REST API service')
    load.add_argument('--force', action='store_true', help='Ignore sanity checks')
    load.add_argument('-c', '--config', type=str, help='Read productstatus config from the given file', default=syncer.config.DEFAULT_CONFIG_PATH)
    load.set_defaults(func=exec_load)
    
    args = parser.parse_args()

    if not os.path.exists(args.config):
        print('Unable to find config file')
        sys.exit(syncer.config.EXIT_CONFIG)
    config_parser = configparser.SafeConfigParser()
    config_parser.read(args.config)
    args.database = config_parser.get('syncer', 'state_database_file')
    
    args.base_url = config_parser.get('productstatus', 'url')
    args.verify_ssl = bool(int(config_parser.get('productstatus', 'verify_ssl')))

    sys.exit(args.func(args))
